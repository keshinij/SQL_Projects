SQL Data Exploration
  
/*  dataset: https://ourworldindata.org/covid-deaths  */


CREATE DATABASE IF NOT EXISTS covid;
USE covid;

SELECT * 
FROM covid.covid_deaths
WHERE continent IS NOT NULL
ORDER BY 3, 4;                   

/*
Line 7 WHERE continent IS NOT NULL
When we analyse our data in the excel file, we notice that there are null values in continent column. Upon further analysis, we see that the column location which include continent names, for example Africa, South America ... which in turn corresponds to the null value. Therefore, we need to exclude these from our data.
Line 8 With ORDER BY, we don't need to write column name, we can only write the coulmn number 
*/

-- data which we will be using

SELECT location, date, total_cases, new_cases, total_deaths, population
FROM covid.covid_deaths
WHERE continent IS NOT NULL
ORDER BY 1, 2;

SELECT * 
FROM covid_vaccinations
WHERE continent IS NOT NULL
ORDER BY 3, 4;


-- total cases vs total deaths

SELECT location, date, total_cases, total_deaths, ROUND((total_deaths/total_cases)*100,2) AS deathPercentage
FROM covid.covid_deaths
ORDER BY 1, 2;


-- show the likelihood of dying if you contract covid in the United States

SELECT location, date, total_cases, total_deaths, ROUND((total_deaths/total_cases)*100,2) AS deathPercentage
FROM covid.covid_deaths
WHERE location LIKE '%States%'
ORDER BY 1, 2;


-- show what percentage of population were infected with covid

SELECT location, date, total_cases, population, (total_cases/population)*100 AS percentPopulationInfected
FROM covid.covid_deaths
ORDER BY 1, 2;


-- countries with highest infection rate compared to population

SELECT location, population, MAX(total_cases) AS highestInfectionCount, MAX((total_cases/population)*100) AS percentPopulationInfected
FROM covid.covid_deaths
GROUP BY location, population
ORDER BY percentPopulationInfected DESC;


-- join the 2 tables

SELECT *
FROM covid.covid_deaths de JOIN covid.covid_vaccinations va
ON de.location=va.location AND de.date=va.date;

/* Joining tables by just one column does not work in some scenarios. In situations like these, you may need to use multiple columns to join tables. */


-- shows total number of vaccinated persons per date for each country

SELECT de.continent, de.location, de.date, population, new_vaccinations, SUM(va.new_vaccinations) OVER(PARTITION BY de.location ORDER BY de.location, de.date) AS rollingPeopleVaccinated
FROM covid.covid_deaths de JOIN covid.covid_vaccinations va
ON de.location=va.location AND de.date=va.date
WHERE de.continent IS NOT NULL
ORDER BY 2, 3;


-- show percentage of people vaccinated per date for each country

WITH PopvsVac (continent, location, date, population, new_vaccinations) AS (
SELECT de.continent, de.location, de.date, population, new_vaccinations, SUM(va.new_vaccinations) OVER(PARTITION BY de.location ORDER BY de.location, de.date) AS rollingPeopleVaccinated
FROM covid.covid_deaths de JOIN covid.covid_vaccinations va
ON de.location=va.location AND de.date=va.date
WHERE de.continent IS NOT NULL
)
SELECT *, (rollingPeopleVaccinated/population)*100 AS percentageVaccinated
FROM PopvsVac;

-- using Temp Table to perform calculation on Partition By in previous query

DROP TABLE IF EXISTS PercentageVaccinated;
CREATE TABLE PercentageVaccinated (
continent nvarchar(255),
location nvarchar(255),
date datetime,
population numeric,
new_vaccinations numeric,
rollingPeopleVaccinated numeric
);

INSERT INTO PercentageVaccinated
SELECT de.continent, de.location, de.date, population, new_vaccinations, SUM(va.new_vaccinations) OVER(PARTITION BY de.location ORDER BY de.location, de.date) AS rollingPeopleVaccinated
FROM covid.covid_deaths de JOIN covid.covid_vaccinations va
ON de.location=va.location AND de.date=va.date;

SELECT *, (rollingPeopleVaccinated/population)*100 AS percentageVaccinated
FROM PercentageVaccinated;


-- creating a view to store data for later visualisation

CREATE VIEW PercentPopulationVaccinated as
SELECT de.continent, de.location, de.date, population, new_vaccinations, SUM(va.new_vaccinations) OVER(PARTITION BY de.location ORDER BY de.location, de.date) AS rollingPeopleVaccinated
FROM covid.covid_deaths de JOIN covid.covid_vaccinations va
ON de.location=va.location AND de.date=va.date
WHERE de.continent IS NOT NULL
ORDER BY 2, 3;
